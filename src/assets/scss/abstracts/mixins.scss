/// Event wrapper
/// Helps styling event elements like links
///
/// Example use:
/// @include on-event() {
///   text-decoration: underline;
/// }
///
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }

  @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Use a breakpoint from the defined breakpoints map variable
/// Mobile first aproach (min-width)
///
/// Example use:
/// @include breakpoint("tablet") {
///   color: red;
///   .link { color: white; }
/// }
///
/// @author Kitty Giraudel
/// @param {String} $breakpoint
@mixin breakpoint($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: #{map-get($breakpoints, $breakpoint)}) {
      @content;
    }
  }

  @else {
    @warn 'Unfortunately, no value could be retrieved from `#{$breakpoint}`. '
      + 'Please make sure it is defined in `$breakpoints` map.';
  }
}

@mixin breakpoint-max($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (max-width: #{map-get($breakpoints, $breakpoint) - 1px}) {
      @content;
    }
  }

  @else {
    @warn 'Unfortunately, no value could be retrieved from `#{$breakpoint}`. '
      + 'Please make sure it is defined in `$breakpoints` map.';
  }
}

@mixin breakpoint-between($minBreakpoint, $maxBreakpoint) {
  @if map-has-key($breakpoints) {
    @media (min-width: #{map-get($breakpoints, $minBreakpoint)}) and (max-width: #{map-get($breakpoints, $maxBreakpoint) - 1px}) {
      @content;
    }
  }

  @else {
    @warn 'Unfortunately, no value could be retrieved from `#{$minBreakpoint}` and/or `#{$maxBreakpoint}`. '
      + 'Please make sure it is defined in `$breakpoints` map.';
  }
}

@mixin dark-theme() {
  @media (prefers-color-scheme: dark) {
    @content;
  }
}

@mixin light-theme() {
  @media (prefers-color-scheme: light) {
    @content;
  }
}

// Aspect ratio mixin for images and background images.
// img elements require a parent element, figure for example,
// with this mixin applied.
// Author: Chris Coyier
// Ref: https://css-tricks.com/snippets/sass/maintain-aspect-ratio-mixin/
@mixin aspect-ratio($width, $height) {
  position: relative;

  &::before {
    content: '';
    display: block;
    padding-top: ($height / $width) * 100%;
    width: 100%;
  }

  > * {
    bottom: 0;
    height: 100%;
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
    width: 100%;
  }
}

@mixin chrome-only() {
  // stylelint-disable-next-line
  @media screen and (-webkit-min-device-pixel-ratio: 0) and (min-resolution: 0.001dpcm) {
    @content;
  }
}
